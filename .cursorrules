# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities

# Scratchpad

## Project Structure Organization (2024-02-22)

### Current Structure
```
focuspath/
├── landing/                 # PWA Installation Landing Page
│   ├── public/             # Static assets
│   │   ├── icons/         # App icons
│   │   ├── manifest.json  # PWA manifest
│   │   └── robots.txt     # SEO configuration
│   ├── src/
│   │   └── app/          # Next.js app router pages
│   └── scripts/          # Build and utility scripts
│
├── src/                    # Main FocusPath App
│   ├── components/        # Reusable UI components
│   ├── lib/              # Utility functions
│   ├── pages/            # App pages
│   ├── store/            # State management
│   └── App.tsx           # Root component
│
├── supabase/              # Database configuration
└── docs/                  # Project documentation
    ├── context.md
    └── requirements.md
```

### Cleanup Tasks
[ ] 1. Landing Page
   - Move icons to public/icons/
   - Organize scripts directory
   - Remove unused configuration files

[ ] 2. Main App
   - Consolidate Tailwind configs
   - Move documentation to docs/
   - Clean up root directory

[ ] 3. Shared Configuration
   - Unify ESLint configuration
   - Standardize TypeScript config
   - Consolidate package.json scripts

### Next Steps
[ ] 1. Testing
   - Run local development server
   - Test PWA installation flow on iOS
   - Test PWA installation flow on Android
   - Verify all pages load correctly

[ ] 2. GitHub Setup
   - Initialize repository
   - Add .gitignore
   - Make initial commit
   - Push to GitHub

[ ] 3. Deployment
   - Deploy to Vercel
   - Connect custom subdomain
   - Verify SSL certificate
   - Test live deployment

## Current Task: Create SEO-Optimized Onboarding Page (2024-02-22)

### Overview
Creating a highly SEO-optimized onboarding page for FocusPath that will serve as the main entry point for users to install the PWA version of our app.

### Task Breakdown
[X] 1. Technical Setup
  - Created Next.js project with TypeScript and Tailwind CSS
  - Configured meta tags and SEO elements
  - Setup sitemap.xml and robots.txt
  - Added PWA manifest

[X] 2. Content Strategy
  - Implemented high-ranking keywords in meta tags
  - Created compelling meta descriptions
  - Optimized header hierarchy
  - Created engaging copy focused on app benefits

[X] 3. PWA Installation Flow
  - Created clear installation instructions
  - Added platform-specific guidance (iOS/Android)
  - Added visual tutorials
  - Prepared QR code section

[X] 4. SEO Optimization
  - Implemented schema markup
  - Added Open Graph tags
  - Created XML sitemap
  - Optimized for mobile-first indexing
  - Added structured data for app

[X] 5. Performance Optimization
  - Generated optimized app icons (192x192 and 512x512)
  - Created app screenshots
  - Implemented lazy loading with next/image
  - Added PWA caching strategies

### Current Status
1. Landing Page ✅
   - Home page with hero section and features
   - Installation guide with platform-specific instructions
   - About page with mission and values
   - SEO optimization complete

2. PWA Setup ✅
   - Manifest.json configured
   - Icons generated
   - Service worker added
   - Installation instructions added

3. Subdomain Configuration ✅
   - Set up app.rajeshkalidandi.online
   - Updated all URLs in codebase
   - Configured meta tags with correct domain

### Next Steps
[ ] 1. Testing
   - Run local development server
   - Test PWA installation flow on iOS
   - Test PWA installation flow on Android
   - Verify all pages load correctly

[ ] 2. GitHub Setup
   - Initialize repository
   - Add .gitignore
   - Make initial commit
   - Push to GitHub

[ ] 3. Deployment
   - Deploy to Vercel
   - Connect custom subdomain
   - Verify SSL certificate
   - Test live deployment

### Technical Notes
- Using Next.js 15.1.7 with Turbopack
- TypeScript for type safety
- Tailwind CSS for styling
- PWA manifest for app installation
- Service workers for offline support

## Current Enhancement Plan (2024-02-22)

### 1. Content Enhancement
[X] Current Resources page has:
  - Educational resources (4 links)
  - Daily inspiration quote
  - Quick tips section

[ ] Add new educational resources:
  - Scientific articles about addiction recovery
  - Video resources (TED talks, expert interviews)
  - Book recommendations
  - Success stories from the community

[ ] Expand Quick Tips:
  - Categorize tips (Exercise, Mindfulness, Social, Productivity)
  - Add tip of the day feature
  - Allow community-submitted tips

[ ] Create Quote Database:
  - Curate 100+ motivational quotes
  - Add quote categories
  - Implement quote voting system

### 2. Community Features
[X] Current features:
  - Basic forum functionality
  - User authentication

[X] Enhanced User Profiles:
  - Profile customization (display name, bio)
  - Progress badges
  - Achievement system
  - Streak milestones

[X] Community Challenges:
  - Weekly/monthly challenges
  - Group activities
  - Leaderboards
  - Challenge rewards (badges)

[X] Social Features:
  - Support groups with anonymous sharing
  - Group membership and roles
  - Mentorship program
  - Accountability partners

### 3. Progress Tracking
[X] Current features:
  - Basic streak tracking
  - History view
  - Relapse logging

[X] Advanced Analytics:
  - Streak statistics
  - Pattern recognition
  - Trigger analysis
  - Success rate calculations

[X] Custom Milestones:
  - Personal goal setting
  - Custom achievement tracking
  - Progress sharing options
  - Milestone celebrations

[X] Progress Insights:
  - Weekly/monthly reports
  - Progress comparisons
  - Trend analysis
  - Recovery journey timeline

## Implementation Progress
1. Database Schema ✅
   - Added tables for support groups, mentorship
   - Enhanced profiles table with mentor fields
   - Added proper relationships and constraints

2. New Components ✅
   - Groups page with support circles
   - Mentorship program interface
   - Enhanced profile features

3. Next Steps
   - Add more educational content
   - Create initial support groups
   - Set up mentor verification process
   - Add direct messaging between mentors/mentees

## Technical Notes
- Using jsonb for flexible data storage (progress, requirements)
- Implemented row-level security for all new tables
- Added proper foreign key constraints
- Using date-fns for consistent date handling
- Added proper error handling for social features

## Current Task: Remove Community Features (2024-02-22)

### Overview
Removing all community-related features from the FocusPath app to streamline the application and focus on core functionality.

### Task Breakdown
[X] 1. UI Components
  - Removed community NavLink from Layout component
  - Removed community quick action from Home page
  - Removed DirectMessaging component
  - Removed Mentorship page

[X] 2. Database Cleanup
  - Verified migration file 20250222060000_remove_community_features.sql
  - Migration removes all community tables
  - Migration removes all related policies and functions
  - Migration removes mentor-related profile columns

### Files Modified/Removed
1. Modified Files ✅
   - src/components/Layout.tsx (removed community NavLink)
   - src/pages/Home.tsx (removed community quick action)

2. Removed Files ✅
   - src/pages/Mentorship.tsx
   - src/components/DirectMessaging.tsx

3. Database Changes ✅
   - Migration file handles all community table removals
   - Migration file handles all related constraints and indexes
   - Migration file handles profile table column cleanup

### Next Steps
[ ] 1. Testing
   - Run the application locally
   - Verify no broken links or references to community features
   - Test navigation flow without community features
   - Verify database migration success

[ ] 2. Documentation
   - Update README to reflect removed features
   - Update API documentation if needed
   - Update user guide/help documentation

[ ] 3. Deployment
   - Deploy changes to staging
   - Run database migrations
   - Verify changes in staging environment
   - Deploy to production

## Current Task: Add SEO and PWA Features (2024-02-22)

### Overview
Adding comprehensive SEO metadata and PWA support to the FocusPath app to improve discoverability and provide a better mobile experience.

### Task Breakdown
[X] 1. SEO Metadata
  - Added meta title and description
  - Added Open Graph tags for social sharing
  - Added Twitter Card tags
  - Added schema.org markup
  - Added keywords and author meta tags

[X] 2. PWA Support
  - Generated app icons (192x192 and 512x512)
  - Created manifest.json with app details
  - Configured service worker with Workbox
  - Added offline support and caching
  - Added app shortcuts for quick access

[X] 3. Search Engine Support
  - Created robots.txt with crawling rules
  - Created sitemap.xml with page priorities
  - Added Google verification tag
  - Protected private routes from indexing

### Files Modified/Added
1. Modified Files ✅
   - index.html (added meta tags and PWA support)
   - vite.config.ts (configured PWA plugin)
   - package.json (added icon generation script)

2. Added Files ✅
   - public/manifest.json
   - public/robots.txt
   - public/sitemap.xml
   - public/icons/icon-192x192.png
   - public/icons/icon-512x512.png
   - scripts/generate-icons.js

### Next Steps
[X] 1. Build and Test
   - Built the app successfully
   - Generated PWA assets
   - Service worker registered
   - Manifest loaded correctly

[ ] 2. GitHub Setup
   - Initialize repository
   - Add .gitignore
   - Make initial commit
   - Push to GitHub

[ ] 3. Deployment
   - Deploy to production
   - Verify PWA installation
   - Test offline functionality
   - Submit sitemap to Google